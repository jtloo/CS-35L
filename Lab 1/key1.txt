Justin Loo
204 600 399

Exercise 1.1:
1. Open exer1.html in Emacs

2. C-s P U

3. C-s l a

4. C-s s e l f - r

5. C-s a r r o w

6. C-e

7. C-a

8. To use fewer keystrokes, you could use the keyboard shortcuts 
for the various functions, like C-s for the search function.

9. I did not use the cursor keys. I used the keyboard shortcuts.

10. C-x C-c

Exerices 1.2:
1. Open exer2.html in Emacs.

2. M-g g 1 8 ENTER C-k

3. C-s del ENTER C-a C-k

4. C-s e n . C-s C-M-a DOWN C-w
DOWN is the down cursor key.

5. C-s < ! - ENTER LEFT LEFT LEFT C-SPC
RIGHT RIGHT RIGHT RIGHT RIGHT RIGHT RIGHT C-w
C-s M-p C-s C-a C-k

Exercise 1.3:
1. Opened exer3.html in Emacs

2. C-s A M-f M-f BACKSPACE 3 7 C-s A M-f M-f BACKSPACE 3 7

3. C-s U T RIGHT BACKSPACE BACKSPACE S RIGHT RIGHT BACKSPACE A S C I I

4. C-s < / o C-e ENTER

5. C-x C-c

Exercise 1.4:
1. Run the command given

2. Open exer4.html in Emacs

3. M-> C-r < C-SPC C-e M-w M-g g 3 5 2 C-y

4. M-> C-r < ! C-r C-SPC C-e C-b C-b C-b C-b
C-b M-g g 3 3 7 C-b C-b C-b C-b C-b C-y
M-> C-r C-r C-r C-r C-SPC C-M-f M-w M-g g 3 0 2
ENTER C-y C-a RIGHT BACKSPACE UP RIGHT BACKSPACE
M-> C-r D C-a RIGHT C-SPC M-w M-g g 9 0 DOWN DOWN DOWN C-y 
M-> C-r < ! C-r C-r C-r C-r C-SPC C-e M-w M-g g 1 8 C-y

5. M-> C-r - - - C-r C-SPC M-> C-w

6. C-x u

7. M-> C-r C-r C-r C-a < ! - - M-% - > ENTER <!-- ENTER y y y y y DOWN - - >

8. M-< M-% < o l > ENTER < O l > ENTER y y y y y y y
There were 7 occurences of <ol>.

9. diff exer1.html exer4.html >exer4.diff

Exercise 1.5:
1. C-x 4 d ENTER + j u n k ENTER

2. C-x C-f h e l l o . c ENTER 
This is followed by the C code

3. M-x c o m p i l e ENTER h e l l o ENTER

4. M-x UP C-a C-SPC C-e C-w . / h e l l o ENTER
C-x o C-x C-w h e l l o - o u t ENTER

5. C-SPC M-> M-w C-y
-*- mode: compilation; default-directory: "~/junk/" -*-
Compilation started at Fri Apr  7 15:27:58

./hello
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Compilation finished at Fri Apr  7 15:27:58

Exercise 1.6:
1. C-x b * s c r a t c h *

2. ( r a n d o m ) C-j 

3. ( s e t q SPACE x SPACE ( r a n d o m ) )
C-j ( s e t q SPACE y SPACE ( r a n d o m ) ) C-j 

4. ( * SPACE x SPACE y) C-j
The product of x * y is -534622208752590060. This is
incorrect since x = -407454645627560705 and y = -759900912694765332.
The sign of the answer should at least be positive since x and
y are both negative.

5. M - : SPACE ( * SPACE X SPACE Y) C-j
The output is the same as before.

6. The numbers are some what random. While running
the random function multiple times yielded 
differing answers, the answers were all 
very long integers that were positive or negative.
I did not get any small ones.

7. The output will be mathematically correct if the
product is between the most-positive-fixnum 
and the most-negative-fixnum. If the product is 
outside of the range, overflow will occur, and the 
output will be mathematically incorrect. It will be
difficult to calculate the probability of this 
happening due to the sheer amount of number pairs
whose products will cause overflow.
